// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not16(in=x, out=notx);
    Not16(in=y, out=noty);

    Mux4Way16(a=x, b=notx, c=false, d=true, sel[1]=zx, sel[0]=nx, out=newx);
    Mux4Way16(a=y, b=noty, c=false, d=true, sel[1]=zy, sel[0]=ny, out=newy);

    And16(a=newx, b=newy, out=andxy);
    Add16(a=newx, b=newy, out=addxy);

    Mux16(a=andxy, b=addxy, sel=f, out=xy);

    Not16(in=xy, out=notxy);
    Mux16(a=xy, b=notxy, sel=no, out=out, out[15]=ng, out[0]=out1, out[1]=out2, out[2]=out3, out[3]=out4, out[4]=out5, out[5]=out6, out[6]=out7, out[7]=out8, out[8]=out9, out[9]=out10, out[10]=out11, out[11]=out12, out[12]=out13, out[13]=out14, out[14]=out15, out[15]=out16);
    HalfAdder(a=out1 ,b=out2 ,sum=s1 , carry=c1 );
    FullAdder(a=out3 ,b=s1, c=c1, sum=s2 , carry=c2 );
    FullAdder(a=out4 ,b=s2, c=c2, sum=s3 , carry=c3 );
    FullAdder(a=out5 ,b=s3, c=c3, sum=s4 , carry=c4 );
    FullAdder(a=out6 ,b=s4, c=c4, sum=s5 , carry=c5 );
    FullAdder(a=out7 ,b=s5, c=c5, sum=s6 , carry=c6 );
    FullAdder(a=out8 ,b=s6, c=c6, sum=s7 , carry=c7 );
    FullAdder(a=out9 ,b=s7, c=c7, sum=s8 , carry=c8 );
    FullAdder(a=out10 ,b=s8, c=c8, sum=s9 , carry=c9 );
    FullAdder(a=out11 ,b=s9, c=c9, sum=s10 , carry=c10 );
    FullAdder(a=out12 ,b=s10, c=c10, sum=s11 , carry=c11 );
    FullAdder(a=out13 ,b=s11, c=c11, sum=s12 , carry=c12);
    FullAdder(a=out14 ,b=s12, c=c12, sum=s13 , carry=c13 );
    FullAdder(a=out15 ,b=s13, c=c13, sum=s14 , carry=c14 );
    FullAdder(a=out16 ,b=s14, c=c14, sum=s15 , carry=c15 );
    HalfAdder(a=s15, b=c15, sum=s16, carry=c16);
    HalfAdder(a=s16, b=c16, sum=s17, carry=false);
    Not(in=s17, out=zr);
}